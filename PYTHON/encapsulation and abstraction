  encapsulation:

# class student:
#     def __init__(self,name,age,course):
#         self.name = name
#         self.age = age
#         self.course = course
#     def show(self):
#         print("Name: ",self.name,"Age: ",self.age)
#     def details(self):
#         print(self.name,"is pursuing the course :", self.course)

# stu1 = student("Jose",21,"python")
# stu1.show()
# stu1.details()

# private member:
#  accessing outside of the class using name mangling:
# class student:
#     def __init__(self,name,age,course):
#         self.name = name
#         self.__age = age
#         self.course = course
#     def show(self):
#         print("Name: ",self.name)
#     def details(self):
#         print(self.name,"is pursuing the course :", self.course)
# stu1 = student("Jose",21,"python")
# stu1.show()
# stu1.details()
# print("age:",stu1._student__age)


#  protected member:

# class student:
#     def __init__(self):
#         self._age = 21
# class stu1(student):
#     def __init__(self, name):
#         self.name = name
#         student.__init__(self)

#     def show(self):
#         print("Name: ",self.name)
#         print("age: ",self._age)

# s = stu1("jose")
# s.show()
# print("age: ",s._age)

# getter and setter:

# class student:
#     def __init__(self,name,age):
#         self.name = name
#         self.__age = age
#     def get_age(self):
#         return self.__age
#     def set_age(self,age):
#         self.__age = age

# s = student("jose",21)
# print("name: ",s.name, "age: ",s.get_age())


# s.set_age(22)
# print("age: ",s.get_age())



#  abstaction:

#  creation of abstract classes and methods:

# from abc import ABC
# class student(ABC):
#     def check(self):
#         print("hello")
# class seniorstu(student):
#     def course(self):
#         print("seniorstu pursuing Java")
# class juniorstu(student):
#     def course(self):
#         print("juniorstu pursuing python")

# obj1 = seniorstu()
# obj1.course()
# obj1.check()


# obj2 = juniorstu()
# obj2.course()
# obj2.check()

# from abc import ABC
 
# class Animal(ABC):
 
#     def sleep(self):
#         print("I am going to sleep in a while")
 
#     def sound(self):
#         print("This function is for defining the sound by any animal")
#         pass
 
# class Snake(Animal):
#     def sound(self):
#         print("I can hiss")
 
# class Dog(Animal):
#     def sound(self):
#         print("I can bark")
 
# class Lion(Animal):
#     def sound(self):
#         print("I can roar")
       
# class Cat(Animal):
#     def sound(self):
#         print("I can meow")

# c = Cat()
# c.sleep()
# c.sound()
 
# c = Snake()
# c.sound()

# c = Lion()
# c.sound()

# from abc import ABC
# class vehicle(ABC):
#     def details(self):
#         pass
# class car(vehicle):
#     def details(self):
#         print("car is one of the vehicle")
# class bike(vehicle):
#     def details(self):
#         print("bike is two wheeled vehicle")
# obj1 = car()
# obj1.details()

# obj2 = bike()
# obj2.details()

# from abc import ABC
# class person(ABC):
#     def details(self,name,age):
#         self.name = name
#         self.age = age
#         return self.name,self.age
# class p1(person):
#     def details(self, name, age):
#         print("Name: ",name,"age: ",age)
# class p2(person):
#     def details(self, name, age):
#         print("name: ",name,"age: ",age)

# obj1 = p2()
# obj1.details("jose",21)
# obj2 = p1()
# obj2.details("vero",19)
